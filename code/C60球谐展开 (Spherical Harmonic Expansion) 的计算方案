import numpy as np
from scipy.special import sph_harm

# --- C60 标准三维顶点坐标 (60个点, 已归一化) ---
# 这是完整的60个顶点坐标
C60_VERTICES = np.array([
    [0.0, 0.52573111, 0.85065081], [0.0, 0.52573111, -0.85065081],
    [0.0, -0.52573111, 0.85065081], [0.0, -0.52573111, -0.85065081],
    [0.85065081, 0.0, 0.52573111], [-0.85065081, 0.0, 0.52573111],
    [0.85065081, 0.0, -0.52573111], [-0.85065081, 0.0, -0.52573111],
    [0.52573111, 0.85065081, 0.0], [-0.52573111, 0.85065081, 0.0],
    [0.52573111, -0.85065081, 0.0], [-0.52573111, -0.85065081, 0.0],
    [0.68819096, 0.5, 0.52573111], [0.68819096, 0.5, -0.52573111],
    [0.68819096, -0.5, 0.52573111], [0.68819096, -0.5, -0.52573111],
    [-0.68819096, 0.5, 0.52573111], [-0.68819096, 0.5, -0.52573111],
    [-0.68819096, -0.5, 0.52573111], [-0.68819096, -0.5, -0.52573111],
    [0.16245985, 0.80901699, 0.52573111], [0.16245985, 0.80901699, -0.52573111],
    [0.16245985, -0.80901699, 0.52573111], [0.16245985, -0.80901699, -0.52573111],
    [-0.16245985, 0.80901699, 0.52573111], [-0.16245985, 0.80901699, -0.52573111],
    [-0.16245985, -0.80901699, 0.52573111], [-0.16245985, -0.80901699, -0.52573111],
    [0.95105652, 0.30901699, 0.0], [-0.95105652, 0.30901699, 0.0],
    [0.95105652, -0.30901699, 0.0], [-0.95105652, -0.30901699, 0.0],
    [0.2763932, 0.0, 0.95105652], [-0.2763932, 0.0, 0.95105652],
    [0.2763932, 0.0, -0.95105652], [-0.2763932, 0.0, -0.95105652],
    [0.4472136, 0.80901699, 0.30901699], [0.4472136, 0.80901699, -0.30901699],
    [0.4472136, -0.80901699, 0.30901699], [0.4472136, -0.80901699, -0.30901699],
    [-0.4472136, 0.80901699, 0.30901699], [-0.4472136, 0.80901699, -0.30901699],
    [-0.4472136, -0.80901699, 0.30901699], [-0.4472136, -0.80901699, -0.30901699],
    [0.7236068, 0.5, 0.4472136], [0.7236068, 0.5, -0.4472136],
    [0.7236068, -0.5, 0.4472136], [0.7236068, -0.5, -0.4472136],
    [-0.7236068, 0.5, 0.4472136], [-0.7236068, 0.5, -0.4472136],
    [-0.7236068, -0.5, 0.4472136], [-0.7236068, -0.5, -0.4472136],
    [0.0, 0.95105652, 0.30901699], [0.0, 0.95105652, -0.30901699],
    [0.0, -0.95105652, 0.30901699], [0.0, -0.95105652, -0.30901699],
    [0.89442719, 0.0, 0.4472136], [-0.89442719, 0.0, 0.4472136],
    [0.89442719, 0.0, -0.4472136], [-0.89442719, 0.0, -0.4472136]
])

def calculate_clm(vertices, l_max):
    """
    计算给定顶点分布的球谐展开系数 c_lm。
    """
    N = len(vertices)
    w = 1.0 / N  # 权重均等
    
    # 1. 笛卡尔坐标转球坐标
    x, y, z = vertices[:, 0], vertices[:, 1], vertices[:, 2]
    r = np.sqrt(x**2 + y**2 + z**2)
    theta = np.arccos(z / r) # 天顶角
    phi = np.arctan2(y, x)   # 方位角
    
    coefficients = {}
    
    # 2. 循环计算 c_lm
    for l in range(l_max + 1):
        for m in range(-l, l + 1):
            # Y_lm*(theta, phi)
            ylm_conj = np.conj(sph_harm(m, l, phi, theta))
            
            # c_lm = Σ w * Y_lm*
            c_lm = np.sum(w * ylm_conj)
            
            # 只存储数值上显著不为零的系数
            if not np.isclose(c_lm, 0.0):
                coefficients[(l, m)] = c_lm
                
    return coefficients

# --- 执行计算 ---
l_max = 10
clm_results = calculate_clm(C60_VERTICES, l_max)