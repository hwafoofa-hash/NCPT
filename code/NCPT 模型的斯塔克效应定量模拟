import numpy as np
from scipy.special import sph_harm
import matplotlib.pyplot as plt

# --- C60 标准三维顶点坐标 (60个点, 已归一化) ---
C60_VERTICES = np.array([
    [0.0, 0.52573111, 0.85065081], [0.0, 0.52573111, -0.85065081],
    [0.0, -0.52573111, 0.85065081], [0.0, -0.52573111, -0.85065081],
    [0.85065081, 0.0, 0.52573111], [-0.85065081, 0.0, 0.52573111],
    [0.85065081, 0.0, -0.52573111], [-0.85065081, 0.0, -0.52573111],
    [0.52573111, 0.85065081, 0.0], [-0.52573111, 0.85065081, 0.0],
    [0.52573111, -0.85065081, 0.0], [-0.52573111, -0.85065081, 0.0],
    [0.68819096, 0.5, 0.52573111], [0.68819096, 0.5, -0.52573111],
    [0.68819096, -0.5, 0.52573111], [0.68819096, -0.5, -0.52573111],
    [-0.68819096, 0.5, 0.52573111], [-0.68819096, 0.5, -0.52573111],
    [-0.68819096, -0.5, 0.52573111], [-0.68819096, -0.5, -0.52573111],
    [0.16245985, 0.80901699, 0.52573111], [0.16245985, 0.80901699, -0.52573111],
    [0.16245985, -0.80901699, 0.52573111], [0.16245985, -0.80901699, -0.52573111],
    [-0.16245985, 0.80901699, 0.52573111], [-0.16245985, 0.80901699, -0.52573111],
    [-0.16245985, -0.80901699, 0.52573111], [-0.16245985, -0.80901699, -0.52573111],
    [0.95105652, 0.30901699, 0.0], [-0.95105652, 0.30901699, 0.0],
    [0.95105652, -0.30901699, 0.0], [-0.95105652, -0.30901699, 0.0],
    [0.2763932, 0.0, 0.95105652], [-0.2763932, 0.0, 0.95105652],
    [0.2763932, 0.0, -0.95105652], [-0.2763932, 0.0, -0.95105652],
    [0.4472136, 0.80901699, 0.30901699], [0.4472136, 0.80901699, -0.30901699],
    [0.4472136, -0.80901699, 0.30901699], [0.4472136, -0.80901699, -0.30901699],
    [-0.4472136, 0.80901699, 0.30901699], [-0.4472136, 0.80901699, -0.30901699],
    [-0.4472136, -0.80901699, 0.30901699], [-0.4472136, -0.80901699, -0.30901699],
    [0.7236068, 0.5, 0.4472136], [0.7236068, 0.5, -0.4472136],
    [0.7236068, -0.5, 0.4472136], [0.7236068, -0.5, -0.4472136],
    [-0.7236068, 0.5, 0.4472136], [-0.7236068, 0.5, -0.4472136],
    [-0.7236068, -0.5, 0.4472136], [-0.7236068, -0.5, -0.4472136],
    [0.0, 0.95105652, 0.30901699], [0.0, 0.95105652, -0.30901699],
    [0.0, -0.95105652, 0.30901699], [0.0, -0.95105652, -0.30901699],
    [0.89442719, 0.0, 0.4472136], [-0.89442719, 0.0, 0.4472136],
    [0.89442719, 0.0, -0.4472136], [-0.89442719, 0.0, -0.4472136]
])

def calculate_clm_perturbed(vertices, l, m, beta):
    """
    在外部微扰下，计算单个 c_lm 系数。
    """
    N = len(vertices)
    x, y, z = vertices[:, 0], vertices[:, 1], vertices[:, 2]
    
    weights = (1.0 / N) * (1 + beta * z)
    weights /= np.sum(weights)
    
    r = np.sqrt(x**2 + y**2 + z**2)
    theta = np.arccos(z / r)
    phi = np.arctan2(y, x)
    
    ylm_conj = np.conj(sph_harm(m, l, phi, theta))
    c_lm = np.sum(weights * ylm_conj)
    return c_lm

# --- 模拟参数设置 ---
beta_values = np.linspace(0, 0.5, 20)  # 微扰强度从0线性增加到0.5
c10_squared_magnitudes = []

# --- 执行循环计算 ---
for beta in beta_values:
    c10 = calculate_clm_perturbed(C60_VERTICES, l=1, m=0, beta=beta)
    c10_squared_magnitudes.append(np.abs(c10)**2)

# --- 结果可视化 ---
plt.style.use('seaborn-v0_8-whitegrid')
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

# 绘制 |c_1,0|² vs. β
ax1.plot(beta_values, c10_squared_magnitudes, 'o-', color='r')
ax1.set_xlabel('Perturbation Strength (β)', fontsize=12)
ax1.set_ylabel('|c_1,0|²', fontsize=14)
ax1.set_title('|c_1,0|² vs. β', fontsize=16)

# 绘制 |c_1,0|² vs. β²
beta_squared_values = beta_values**2
ax2.plot(beta_squared_values, c10_squared_magnitudes, 'o-', color='b')
ax2.set_xlabel('Perturbation Strength Squared (β²)', fontsize=12)
ax2.set_ylabel('|c_1,0|²', fontsize=14)
ax2.set_title('|c_1,0|² vs. β² (Linearity Test)', fontsize=16)

fig.suptitle('NCPT Stark Effect Simulation: Emergence of p-orbital', fontsize=20)
plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()